name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust (nightly pin)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-09-20
          components: rust-src, clippy, rustfmt

      - name: Cargo fmt (check)
        run: cargo fmt --all -- --check

      - name: Cargo clippy (deny warnings)
        run: cargo clippy --workspace --all-targets -- -D warnings

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust (nightly pin)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-09-20
          components: rust-src, llvm-tools-preview

      - name: Install system packages (QEMU, mtools, jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86 mtools jq

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build boot crate (devhost stub)
        run: cargo build -p asteria-boot --release

      - name: Build kernel crate (devhost stub)
        run: cargo build -p asteria-kernel --release

      - name: Hexagram HUD — Weld Summary
        id: hud
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          if [ -f manifests/REPRO_MANIFEST.json ]; then
            sha=$(sha256sum manifests/REPRO_MANIFEST.json | awk '{print $1}')
            echo "$sha" > dist/MANIFEST_SHA256.txt
            tol=$(jq -r '.tol // empty' manifests/REPRO_MANIFEST.json)
            res=$(jq -r '.residual // empty' manifests/REPRO_MANIFEST.json)
            weld_id=$(jq -r '.weld_id // empty' manifests/REPRO_MANIFEST.json)
            seed=$(jq -r '.seed // empty' manifests/REPRO_MANIFEST.json)

            echo "weld_id=$weld_id" >> $GITHUB_OUTPUT
            echo "tol=$tol" >> $GITHUB_OUTPUT
            echo "residual=$res" >> $GITHUB_OUTPUT
            echo "seed=$seed" >> $GITHUB_OUTPUT

            {
              echo "## Hexagram HUD — Weld Summary";
              echo "";
              echo "- weld_id: **$weld_id**";
              echo "- s/tol: **$res / $tol**";
              echo "- seed: **$seed**";
              echo "- manifest_sha256: **$sha**";
            } >> $GITHUB_STEP_SUMMARY
          else
            echo "No manifests/REPRO_MANIFEST.json found" | tee dist/HUD_WARN.txt
          fi

      - name: Package artifacts
        run: |
          mkdir -p dist
          echo "Asteria OS build artifacts" > dist/README.txt
          cp Cargo.lock dist/ 2>/dev/null || true
          cp -r manifests dist/manifests 2>/dev/null || true
          tar -C target/release -czf dist/target-release.tgz . || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: asteria-dist-${{ github.run_number }}
          path: dist
